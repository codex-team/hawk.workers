/**
 * Script to generate enum with template names
 *
 * To provide type-safe template names, this script reads template directories' names and generate TS enum
 *
 * Run `yarn generateTemplatesNames` any time you add new template
 *
 * Example:
 *
 * - templates
 *   - new-event
 *   - several-events
 *
 * Output enum:
 * enum Templates {
 *   NewEvent = 'new-event',
 *   SeveralEvents = 'several-events'
 * }
 */
// tslint:disable-next-line:no-var-requires
const path = require('path');
// tslint:disable-next-line:no-var-requires
const fs = require('fs');

/**
 * Function format dir name in kebab-case to PascalCase for enum
 */
function formatName(name: string): string {
  return name
    .split('-')
    .map((part) => part[0].toUpperCase() + part.slice(1))
    .join('');
}

/**
 * Read template dir names
 */
const names = fs
  .readdirSync(path.resolve(__dirname, '../src/templates'))// read templates directory
  .filter((name: string) => !name.endsWith('.ts') && name !== 'blocks');

let generatedEnum = '/**\n * File is auto-generated by scripts/generateTemplatesNames.ts\n */\n';

generatedEnum += 'enum Templates {\n';
generatedEnum += names.map((name: string) => `  ${formatName(name)} = '${name}',`).join('\n');
generatedEnum += '\n}\n\nexport default Templates;\n';

fs.writeFileSync('../src/templates/names.ts', generatedEnum);
